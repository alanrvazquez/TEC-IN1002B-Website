{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Logistic Regression\"\n",
        "subtitle: \"IN1002B: Introduction to Data Science Projects\"\n",
        "author: \n",
        "  - name: Alan R. Vazquez\n",
        "    affiliations:\n",
        "      - name: Department of Industrial Engineering\n",
        "format: \n",
        "  revealjs:\n",
        "    chalkboard: false\n",
        "    multiplex: true\n",
        "    footer: \"Tecnologico de Monterrey\"\n",
        "    logo: IN1002b_logo.png\n",
        "    css: style.css\n",
        "    slide-number: True\n",
        "    html-math-method: mathjax\n",
        "editor: visual\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "## Agenda\n",
        "\n",
        "</br>\n",
        "\n",
        "1.  Introduction\n",
        "2.  Logistic regression\n",
        "3.  Estimating a logistic regression model\n",
        "4.  Classification performance\n",
        "\n",
        "# Introduction\n",
        "\n",
        "## Load the libraries\n",
        "\n",
        "Before we start, let's import the data science libraries into Python.\n"
      ],
      "id": "53941dd4"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: false\n",
        "\n",
        "# Importing necessary libraries\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import statsmodels.api as sm\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay, accuracy_score"
      ],
      "id": "301e5230",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Here, we will introduce the functions `confusion_matrix()`, `ConfusionMatrixDisplay()` and `accuracy_score()` to evaluate the performance of a logistic regression classifier.\n",
        "\n",
        "## Two main problems\n",
        "\n",
        "</br>\n",
        "\n",
        "[**Regression problems**]{style=\"color:blue;\"}. The response $Y$ is quantitative. For example, person’s income, the value of a house, the blood pressure of a patient.\n",
        "\n",
        "[**Classification problems**]{style=\"color:green;\"}. The response $Y$ is qualitative and involves $K$ different categories. For example, the brand of a product purchased (A, B, C) whether a person defaults on a debt (yes or no).\n",
        "\n",
        "The predictors ($\\boldsymbol{X}$) can be qualitative or quantitative.\n",
        "\n",
        "## Terminology\n",
        "\n",
        "</br></br>\n",
        "\n",
        "Explanatory variables or predictors:\n",
        "\n",
        "-   $X$ represents an explanatory variable or predictor.\n",
        "-   $\\boldsymbol{X} = (X_1, X_2, \\ldots, X_p)$ represents a collection of $p$ predictors.\n",
        "\n",
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "[Response]{style=\"text-decoration: underline;\"}:\n",
        "\n",
        "::: incremental\n",
        "-   $Y$ is a [**categorical variable**]{style=\"color:darkgreen;\"} taking [**2 categories**]{style=\"color:darkgreen;\"} or [**classes**]{style=\"color:darkgreen;\"}.\n",
        "\n",
        "-   For example, $Y$ can take [0]{style=\"color:darkgreen;\"} or [1]{style=\"color:darkgreen;\"}, [A]{style=\"color:darkgreen;\"} or [B]{style=\"color:darkgreen;\"}, [no]{style=\"color:darkgreen;\"} or [yes]{style=\"color:darkgreen;\"}, [spam]{style=\"color:darkgreen;\"} or [not spam]{style=\"color:darkgreen;\"}.\n",
        "\n",
        "-   When the classes are strings, it is customary to code them to 0 and 1.\n",
        "\n",
        "    -   The **target class** is the one for which $Y = 1$.\n",
        "    -   The **reference class** is the one for which $Y = 0$.\n",
        ":::\n",
        "\n",
        "## \n",
        "\n",
        "</br></br>\n",
        "\n",
        "[**Goal**]{style=\"color:darkgreen;\"}: Find the best function $C(\\boldsymbol{X})$ for predicting $Y = \\{0, 1\\}$ from $\\boldsymbol{X}$.\n",
        "\n",
        "</br>\n",
        "\n",
        ". . .\n",
        "\n",
        "To achieve this goal, we will consider functions $C(\\boldsymbol{X})$ that [**predict the probability**]{style=\"color:brown;\"} that $Y$ takes the value of 1.\n",
        "\n",
        "</br>\n",
        "\n",
        ". . .\n",
        "\n",
        "A probability for each class can be very useful for gauging the model’s confidence about the predicted classification.\n",
        "\n",
        "## Example 1\n",
        "\n",
        "Consider a spam e-mail filter where $Y$ is the type of e-mail.\n",
        "\n",
        "-   The target class is spam. In this case, $Y=1$.\n",
        "-   The reference class is not spam. In this case, $Y=0$.\n",
        "\n",
        ". . .\n",
        "\n",
        "![](images/spam.png){fig-align=\"center\" width=\"556\" height=\"178\"}\n",
        "\n",
        ". . .\n",
        "\n",
        "Both e-mails would be classified as spam. However, we'd have more confidence in our classification for the second email.\n",
        "\n",
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "Technically, $C(\\boldsymbol{X})$ will work with the *conditional probability*:\n",
        "\n",
        "$$P(Y = 1 | X_1 = x_1, X_2 = x_2, \\ldots, X_p = x_p) = P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})$$\n",
        "\n",
        "In words, this is the probability that $Y$ takes a value of 1 [**given that**]{style=\"color:brown;\"} the predictors $\\boldsymbol{X}$ have taken the values $\\boldsymbol{x} = (x_1, x_2, \\ldots, x_p)$.\n",
        "\n",
        "</br>\n",
        "\n",
        ". . .\n",
        "\n",
        "The conditional probability that $Y$ takes the value of 0 is\n",
        "\n",
        "$$P(Y = 0 | \\boldsymbol{X} = \\boldsymbol{x}) = 1 - P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x}).$$\n",
        "\n",
        "## Bayes Classifier\n",
        "\n",
        "</br>\n",
        "\n",
        "It turns out that, if we know the true structure of $P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})$, we can build a good classification function called the [**Bayes classifier**]{style=\"color:darkblue;\"}:\n",
        "\n",
        "$$C(\\boldsymbol{X}) =\n",
        "    \\begin{cases}\n",
        "      1, & \\text{if}\\ P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x}) > 0.5 \\\\\n",
        "      0, & \\text{if}\\ P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x}) \\leq 0.5\n",
        "    \\end{cases}.$$\n",
        "\n",
        "This function classifies to the most probable class using the conditional distribution $P(Y | \\boldsymbol{X} = \\boldsymbol{x})$.\n",
        "\n",
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "[HOWEVER, we don’t (and will never) know the true form of $P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})$!]{style=\"color:red;\"}\n",
        "\n",
        "</br>\n",
        "\n",
        ". . .\n",
        "\n",
        "To overcome this issue, we have a standard solution:\n",
        "\n",
        "-   Impose an structure on $P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})$.\n",
        "-   This structure produces the [**Logistic Regression classifier**]{style=\"color:brown;\"}.\n",
        "\n",
        ". . .\n",
        "\n",
        "Before we introduce logistic regression, we will present another motivating example.\n",
        "\n",
        "## Example 2\n",
        "\n",
        "Consider the task of identifying old-swiss counterfeit banknotes. The response under study is\n",
        "\n",
        "$$Y =\n",
        "    \\begin{cases}\n",
        "      1, & \\text{if it is a counterfeit banknote} \\\\\n",
        "      0, & \\text{otherwise}\n",
        "    \\end{cases}.$$\n",
        "\n",
        "We have four predictors:\n",
        "\n",
        "::: {style=\"font-size: 90%;\"}\n",
        "-   $X_1$: Left, which is the length of left edge (mm)\n",
        "-   $X_2$: Right, which is the length of right edge (mm)\n",
        "-   $X_3$: Top, which is the distance from the image to top edge\n",
        "-   $X_4$: Bottom, which is the distance from image to bottom\n",
        ":::\n",
        "\n",
        "## Old-Swiss 1000-franc banknote\n",
        "\n",
        "</br>\n",
        "\n",
        "![](images/clipboard-270396609.png)\n",
        "\n",
        "## Dataset\n",
        "\n",
        "The data is in the file “banknotes.xlsx”.\n"
      ],
      "id": "dab53278"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "bank_data = pd.read_excel(\"banknotes.xlsx\")\n",
        "# Set response variable as categorical.\n",
        "bank_data['Status'] = pd.Categorical(bank_data['Status'])\n",
        "bank_data.head()"
      ],
      "id": "f952bac2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Data pre-processing\n",
        "\n",
        "</br>\n",
        "\n",
        "Before we start, we ensure that there are no highly correlated predictors in the dataset. To this end, we construct the correlation plot.\n"
      ],
      "id": "0721b31f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: false\n",
        "#| fig-align: center\n",
        "#| code-fold: false\n",
        "\n",
        "# Remove response.\n",
        "predictors_full = bank_data.drop(columns = ['Status'])\n",
        "\n",
        "# Compute correlation matrix.\n",
        "correlation_matrix = predictors_full.corr()\n",
        "\n",
        "# Plot the correlation matrix\n",
        "sns.heatmap(correlation_matrix.abs(), cmap = 'coolwarm', annot = True)\n",
        "plt.title(\"Heatmap on correlations\") # Set plot title."
      ],
      "id": "3a029680",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "</br>\n"
      ],
      "id": "f8559089"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: true\n",
        "#| fig-align: center\n",
        "\n",
        "# Remove response.\n",
        "predictors_full = bank_data.drop(columns = ['Status'])\n",
        "\n",
        "# Compute correlation matrix.\n",
        "correlation_matrix = predictors_full.corr()\n",
        "\n",
        "# Plot the correlation matrix\n",
        "sns.heatmap(correlation_matrix.abs(), cmap = 'coolwarm', annot = True)\n",
        "plt.title(\"Heatmap on correlations\") # Set plot title."
      ],
      "id": "af9a256f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "The correlation plot shows that the predictors `Left` ($X_1$) and `Right` ($X_2$) have an absolute correlation of 0.74. Using a threshold for high correlation of 0.70, we thus remove one predictor from the database, say, `Right`.\n",
        "\n",
        "</br>\n",
        "\n",
        "Consequently, our database for this problem is\n"
      ],
      "id": "bcce6360"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "bank_data = bank_data.drop(columns = ['Right'])"
      ],
      "id": "d21f2507",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Introduction to logistic regression\n",
        "\n",
        "## Logistic Regression (LR)\n",
        "\n",
        "</br>\n",
        "\n",
        "[Basic Idea]{style=\"text-decoration: underline;\"}: Impose an structure on $P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})$:\n",
        "\n",
        "</br>\n",
        "\n",
        "$$P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x}) = \\frac{e^{\\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_p X_p} }{1 + e^{\\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_p X_p}}$$\n",
        "\n",
        "</br>\n",
        "\n",
        "-   This structure is known as the [**logistic function**]{style=\"color:gold;\"}.\n",
        "-   The logistic function is always between 0 and 1.\n",
        "\n",
        "## Why logistic regression?\n",
        "\n",
        "Let’s use some algebra to reveal some of interesting facts about logistic regression.\n",
        "\n",
        ". . .\n",
        "\n",
        "We start from\n",
        "\n",
        "$$P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x}) = \\frac{e^{\\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_p X_p} }{1 + e^{\\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_p X_p}}.$$\n",
        "\n",
        ". . .\n",
        "\n",
        "Next, we have that\n",
        "\n",
        "$$e^{\\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_p X_p} = \\frac{P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})}{1 - P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})}.$$\n",
        "\n",
        "## The Odds ratio\n",
        "\n",
        "The quantity $$e^{\\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_p X_p} = \\frac{P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})}{1 - P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})}$$ is known as the [\"**odds**\"]{style=\"color:gold;\"} ratio.\n",
        "\n",
        "</br>\n",
        "\n",
        "The odds ratio is the probability that $Y = 1$ divided by the probability that $Y = 0$, given that the predictors $\\boldsymbol{X}$ have taken the values $\\boldsymbol{x} = (x_1, x_2, \\ldots, x_p)$.\n",
        "\n",
        "## \n",
        "\n",
        "Consider the banknote classification problem where $Y = 1$ implies counterfeit and $Y = 0$ genuine note. We have three predictors in $\\boldsymbol{X} =  (X_1, X_3, X_4)$ summarizing specific characteristics of a banknote.\n",
        "\n",
        "</br>\n",
        "\n",
        "The odds ratio is $e^{\\beta_0 + \\beta_1 X_1 + \\beta_3 X_3 + \\beta_p X_4} = \\frac{P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})}{1 - P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})}$\n",
        "\n",
        "::: incremental\n",
        "-   If the ratio is 1, the odds are 50-50.\n",
        "-   If the ratio is greater than 1, the banknote is more likely to be counterfeit than genuine.\n",
        "-   If the ratio is smaller than 1, the banknote is more likely to be genuine than counterfeit.\n",
        ":::\n",
        "\n",
        "## The logg-odds\n",
        "\n",
        "</br>\n",
        "\n",
        "If we take logarithm on both sides, we obtain the \"[log-odds]{style=\"color:brown;\"}\" or \"[logit]{style=\"color:brown;\"}\":\n",
        "\n",
        "$$\\beta_0 + \\beta_1 X_1 + \\cdots + \\beta_p X_p = \\ln \\left( \\frac{P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x} )}{1 - P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})} \\right).$$\n",
        "\n",
        "::: incremental\n",
        "-   The log-odds can take any real value.\n",
        "-   The log-odds is a linear combination of the predictors.\n",
        "-   The log-odds resembles a multiple lienar regression model.\n",
        ":::\n",
        "\n",
        "## Interpretation of coefficients\n",
        "\n",
        "The log-odds allows us to interpret the coefficients of the logistic regression model.\n",
        "\n",
        "$$\\beta_0 + \\beta_1 X_1 + \\cdots + \\beta_p X_p = \\ln \\left( \\frac{P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x} )}{1 - P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})} \\right).$$\n",
        "\n",
        "-   $\\beta_0$ can be [***interpreted***]{style=\"color:drakblue;\"} as the average value of the log-odds ratio given that all predictors are equal to zero.\n",
        "\n",
        "-   $\\beta_j$ can be [***interpreted***]{style=\"color:drakblue;\"} as the average change in the log-odds ratio given by a one-unit increase in $X_j$, when all the other predictors have fixed values.\n",
        "\n",
        "## \n",
        "\n",
        "If $\\beta_j$ is positive, increasing the value of $X_j$ will be associated with increasing the odds ratio or $P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})$. [In other words, increasing the value of $X_j$ increases, on average, the probability that $Y = 1$.]{style=\"color:darkgreen;\"}\n",
        "\n",
        "</br>\n",
        "\n",
        "If $\\beta_j$ is negative, increasing $X_j$ will be associated with decreasing $P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x})$, and with increasing $P(Y = 0 | \\boldsymbol{X} = \\boldsymbol{x})$. [In other words, increasing the value of $X_j$ increases, on average, the probability that $Y = 0$.]{style=\"color:darkgreen;\"}\n",
        "\n",
        "</br>\n",
        "\n",
        "<https://stats.idre.ucla.edu/other/mult-pkg/faq/general/faq-how-do-i-interpret-odds-ratios-in-logistic-regression/>\n",
        "\n",
        "# Estimating a logistic regression model\n",
        "\n",
        "## The logistic regression model\n",
        "\n",
        "</br>\n",
        "\n",
        "The logistic regression model is\n",
        "\n",
        "$$P(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x}) = \\frac{e^{\\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_p X_p} }{1 + e^{\\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + \\cdots + \\beta_p X_p}},$$\n",
        "\n",
        "where the values of the coefficients $\\beta_0$ and $\\beta_j$ are unknown. Therefore, we need to calculate estimates for them.\n",
        "\n",
        "-   $\\hat{\\beta}_0$ is the estimate for $\\beta_0$.\n",
        "-   $\\hat{\\beta}_j$ is the estimate for $\\beta_j$.\n",
        "\n",
        "## How do we estimate the coefficients?\n",
        "\n",
        "</br>\n",
        "\n",
        "We use the [training data]{style=\"color:darkblue;\"}!\n"
      ],
      "id": "3b871cfe"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: true\n",
        "\n",
        "bank_data.head(4)"
      ],
      "id": "aee88062",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Generate training data\n",
        "\n",
        "We split the current data set into a training and a validation dataset. To this end, we use the function `train_test_split()` from **scikit-learn**.\n"
      ],
      "id": "80f0bfcc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "# Set full matrix of predictors.\n",
        "X_full = bank_data.drop(columns = ['Status'])\n",
        "\n",
        "# Set full matrix of responses.\n",
        "Y_full = bank_data['Status']\n",
        "\n",
        "# Split the dataset.\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(X_full, Y_full, \n",
        "                                                    test_size=0.3)"
      ],
      "id": "e27f7deb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The parameter `test_size` sets the portion of the dataset that will go to the validation set.\n",
        "\n",
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "-   The function makes a clever partition of the data using the *empirical* distribution of the response.\n",
        "\n",
        "-   Technically, it splits the data so that the distribution of the response under the training and validation sets is similar.\n",
        "\n",
        "-   Usually, the proportion of the dataset that goes to the test set is 20% or 30%.\n",
        "\n",
        "-   We will later use the [**validation dataset**]{style=\"color:orange;\"} to evaluate the classification performance of the estimated logistic regression model for classifying unobserved data.\n",
        "\n",
        "## Coefficient estimation\n",
        "\n",
        "We estimate the coefficients in the logistic function using ***maximum likelihood estimation***.\n",
        "\n",
        "Essentially, we optimize a non-linear objective function using the so-called Iteratively Re-weighted Least Squares (IRLS) algorithm.\n",
        "\n",
        ". . .\n",
        "\n",
        "The IRLS algorithm (and consequently maximum likelihood estimation and Logistic Regression) fails when:\n",
        "\n",
        "-   There is [***severe multicollinearity***]{style=\"color:purple;\"} among the predictors.\n",
        "-   We can [***perfectly separate***]{style=\"color:purple;\"} the observations belonging to the two groups defined by $Y$.\n",
        "\n",
        "## In Python\n",
        "\n",
        "Using the training dataset, we estimate a logistic regression classifier using the function `Logit()` from **statsmodel**. To this end, we first define the target category using the `get_dummies()`.\n"
      ],
      "id": "38738e96"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "# Create dummy variables.\n",
        "Y_dummies = pd.get_dummies(Y_train, dtype = 'int')\n",
        "\n",
        "# Select target variable.\n",
        "Y_target_train = Y_dummies['counterfeit']"
      ],
      "id": "c8727622",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "We also define the matrix of predictors with the intercept.\n"
      ],
      "id": "0b9c182f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "# Add the intercept to the predictor matrix.\n",
        "X_train_int = sm.add_constant(X_train)"
      ],
      "id": "e0bf6ed2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "After that, we fit the model using the function `Logit()`.\n"
      ],
      "id": "7471b6df"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "# Create logistic regression object.\n",
        "logit = sm.Logit(Y_target_train, X_train_int)\n",
        "\n",
        "# Train the model using the training set.\n",
        "logit_model = logit.fit()\n",
        "\n",
        "# Show estimated coefficients.\n",
        "print(logit_model.params)"
      ],
      "id": "90fd1fee",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Parameter testing\n",
        "\n",
        "</br></br>\n",
        "\n",
        "We can construct significance tests for each coefficient in the logistic regression model. They are called [**Wald tests**]{style=\"color:gold;\"}.\n",
        "\n",
        "</br>\n",
        "\n",
        "Wald tests allow us to test the hypothesis:\n",
        "\n",
        "$$H_0: \\beta_j = 0 \\text{ versus } H_1: \\beta_j \\neq 0$$\n",
        "\n",
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        "Wald tests use the following test statistic:\n",
        "\n",
        "$$W_j = \\frac{\\hat{\\beta}_j}{\\mbox{SE}(\\hat{\\beta}_j) } \\sim N(0,1).$$\n",
        "\n",
        "-   $\\hat{\\beta}_j$ is the estimate of the coefficient $\\beta_j$.\n",
        "-   $\\mbox{SE}(\\hat{\\beta}_j)$ is the standard error of the estimate $\\hat{\\beta}_j$ (due to repeated random sampling).\n",
        "\n",
        "## Important predictors\n",
        "\n",
        "</br>\n",
        "\n",
        "We can use the p-values of these tests to determine which predictor is important.\n",
        "\n",
        "</br>\n",
        "\n",
        "That is, a predictor is important if its p-value is, say, smaller than $\\alpha = 0.05$.\n",
        "\n",
        "</br>\n",
        "\n",
        "For Wald tests to work well, the number of observations in the training data should be large.\n",
        "\n",
        "## \n",
        "\n",
        "The `summary()` function of **statsmodel** contains the Wald tests of the coefficients in the logistic regression model.\n"
      ],
      "id": "43fc2cf1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "logit_summary = logit_model.summary()\n",
        "print(logit_summary)"
      ],
      "id": "15378240",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Classification performance\n",
        "\n",
        "## Estimated classifier\n",
        "\n",
        "</br>\n",
        "\n",
        "After estimating the coefficients, we obtain the estimated logistic regression model\n",
        "\n",
        "$$\\hat{P}(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x}) = \\frac{e^{\\hat{\\beta}_0 + \\hat{\\beta}_1 X_1 + \\hat{\\beta}_2 X_2 + \\cdots + \\hat{\\beta}_p X_p} }{1 + e^{\\hat{\\beta}_0 + \\hat{\\beta}_1 X_1 + \\hat{\\beta}_2 X_2 + \\cdots + \\hat{\\beta}_p X_p}},$$\n",
        "\n",
        "where we have replaced the coefficients $\\beta_j$'s with their estimates $\\hat{\\beta}_j$'s.\n",
        "\n",
        "## \n",
        "\n",
        "Using the estimated logistic regression model, we can build an *approximation* to the Bayes classifier $C(\\boldsymbol{X})$.\n",
        "\n",
        "</br>\n",
        "\n",
        "The approximation is\n",
        "\n",
        "$$\\hat{C}(\\boldsymbol{X}) =\n",
        "    \\begin{cases}\n",
        "      1, & \\text{if}\\ \\hat{P}(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x}) > 0.5 \\\\\n",
        "      0, & \\text{if}\\ \\hat{P}(Y = 1 | \\boldsymbol{X} = \\boldsymbol{x}) \\leq 0.5\n",
        "    \\end{cases}.$$\n",
        "\n",
        "-   We call $\\hat{C}(\\boldsymbol{X})$ the **logistic regression classifier**.\n",
        "-   $\\hat{C}(\\boldsymbol{X})$ can be used to classify new observations.\n",
        "\n",
        "## Evaluation\n",
        "\n",
        "</br>\n",
        "\n",
        "We evaluate a the logistic regression classifier by classifying observations that were not used for training or estimating it.\n",
        "\n",
        "That is, we use the classifier to predict the categories of the test dataset using the predictor values in this set only.\n",
        "\n",
        "In Python, we use the commands:\n"
      ],
      "id": "7e9a85bc"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "\n",
        "# Add constant to the predictor matrix from the test set.\n",
        "X_test = sm.add_constant(X_test)\n",
        "\n",
        "# Predict probabilities.\n",
        "predicted_probability = logit_model.predict(X_test)"
      ],
      "id": "d120882c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "The `predict()` function outputs [**probabilities**]{style=\"color:brown;\"} instead of actual classes.\n"
      ],
      "id": "b35f76f7"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "predicted_probability.head()"
      ],
      "id": "0a4aafb5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "These are the probabilities of a banknote being \"counterfeit\" according to its characteristics (values of the predictors).\n",
        "\n",
        "</br>\n",
        "\n",
        "To turn the probabilities to actual classes, we round them:\n"
      ],
      "id": "7d7d4f0e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "predicted_classes = round(predicted_probability).astype('int')"
      ],
      "id": "7554f594",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n"
      ],
      "id": "08fe4d5d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "predicted_classes.head()"
      ],
      "id": "4842956f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "-   Observations with probabilities higher than 0.5 are classified as \"counterfeit\".\n",
        "-   Observations with probabilities lower than 0.5 are classified as \"genuine\".\n",
        "\n",
        "Now, we compare the predictions with the actual categories in the [**validation dataset**]{style=\"color:orange;\"}. [A good logistic regression model has a good agreement between its predictions and the actual categories.]{style=\"color:darkblue;\"}\n",
        "\n",
        "## Confusion matrix\n",
        "\n",
        "-   A table used to evaluate the performance of a classifier.\n",
        "\n",
        "-   Compares the actual values with the predicted values of a classifier.\n",
        "\n",
        "-   Useful for both binary and multiclass classification problems.\n",
        "\n",
        "![](images/confusion_matrix.png){fig-align=\"center\"}\n",
        "\n",
        "## In Python\n",
        "\n",
        "</br>\n",
        "\n",
        "We compute the confusion matrix using the function with the same name of **scikit-learn**.\n"
      ],
      "id": "3ea4ed1f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "# Create dummy variables for test set.\n",
        "Y_dummies = pd.get_dummies(Y_test, dtype = 'int')\n",
        "\n",
        "# Select target variable from test set.\n",
        "Y_target_test = Y_dummies['counterfeit']\n",
        "\n",
        "# Compute confusion matrix.\n",
        "cm = confusion_matrix(Y_target_test, predicted_classes)\n",
        "\n",
        "# Show confusion matrix.\n",
        "print(cm)"
      ],
      "id": "be7ee682",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "We can visualize the confusion matrix using the `ConfusionMatrixDisplay()` function.\n"
      ],
      "id": "34f7e001"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "#| fig-align: center\n",
        "\n",
        "ConfusionMatrixDisplay(cm).plot()"
      ],
      "id": "7bc3cb67",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Accuracy\n",
        "\n",
        "A simple metric to summarize the information of the confusion matrix is **accuracy**. It is the proportion of correct classifications for both classes, out of the total classifications made.\n",
        "\n",
        "In Python, we compute the accuracy using the function `accuracy_score()` from **scikit-learn**.\n"
      ],
      "id": "c66eeba5"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: true\n",
        "\n",
        "accuracy = accuracy_score(Y_target_test, predicted_classes)\n",
        "print( round(accuracy, 2) )"
      ],
      "id": "80bba591",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "</br>\n",
        "\n",
        "> The higher the accuracy, the better the performance of the classifier.\n",
        "\n",
        "## Remarks\n",
        "\n",
        "</br>\n",
        "\n",
        "-   Accuracy is simple to calculate and interpret.\n",
        "\n",
        "-   It works well when the dataset has a balanced class distribution (i.e., roughly equal 1 and 0 cases).\n",
        "\n",
        "-   Not ideal for imbalanced datasets. When one class is much more frequent than the other, accuracy can be misleading.\n",
        "\n",
        "-   Other summaries of the confusion matrix such as **Precision**, **Recall**, and **F1-Score** are better suited for imbalanced data.\n",
        "\n",
        "# [Return to main page](https://alanrvazquez.github.io/TEC-IN1002B-Website/)"
      ],
      "id": "b94d8570"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}